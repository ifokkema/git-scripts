#!/bin/bash

# This is run after a commit. Take commit message and add it to our list of
#  commits, which will be collected by commit-report.
# Also, log the current commit hash so that when we pull in new commits, we know
#  how much of it is new and should be logged, too, by the post-merge hook.

FILEOUT="$(dirname "${0}")/../commits.log";
PROJECT=`basename $(git rev-parse --show-toplevel)`;
if [[ $PROJECT == 'etc' ]];
then
    # This is the etckeeper project. Don't log this.
    exit 0;
elif [[ $PROJECT == 'FortySecondsCV' || $PROJECT == 'epoxytips.nl' ]];
then
    FILEOUT="$(dirname "${0}")/../commits.private.log";
fi;
BRANCH=`git symbolic-ref --short HEAD 2> /dev/null`;

if [ $BRANCH == "master" ];
then
    echo "--------------------------------------------------";
    echo "!!!!!     WARNING: COMMITTING IN MASTER!     !!!!!";
    echo "--------------------------------------------------";
fi

# Log the current commit in the commits.log file.
echo "Project: ${PROJECT}" >> $FILEOUT;
echo "Branch: ${BRANCH}" >> $FILEOUT;
git log -1 | grep -vE "^(Author|Merge):" >> $FILEOUT;
echo "" >> $FILEOUT;

# Store the commit hash, so that we know about the last local commits.
STATUS="$(dirname "${0}")/../status.log";
cat $STATUS 2> /dev/null | grep -v "^${PROJECT} ${BRANCH} " > "${STATUS}.tmp";
echo -n "${PROJECT} ${BRANCH} " >> "${STATUS}.tmp";
git rev-parse HEAD >> "${STATUS}.tmp";
mv "${STATUS}.tmp" $STATUS;





# Git LFS.
command -v git-lfs >/dev/null 2>&1 || { echo >&2 "\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/post-commit.\n"; exit 2; }
git lfs post-commit "$@"
