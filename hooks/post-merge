#!/bin/bash

# This is run after a merge (which also happens after a pull merges locally).
# We're looking for remote merges to include in our commit log.

FILEOUT="$(dirname "${0}")/../commits.log";
PROJECT=`basename $(git rev-parse --show-toplevel)`;
if [[ $PROJECT == 'FortySecondsCV' ]];
then
    FILEOUT="$(dirname "${0}")/../commits.private.log";
fi;
BRANCH=`git symbolic-ref --short HEAD 2> /dev/null`;

# Check if we know what this project's last commit was.
STATUS="$(dirname "${0}")/../status.log";
COMMIT=`grep "^${PROJECT} ${BRANCH} " $STATUS | cut -d " " -f 3`;
if [ "${COMMIT}" == "" ];
then
  # We don't have a last commit. Assume we're just pulling in one new merge.
  COMMIT="-1";
else
  # Add ".." to get git log to show all commits since the last one.
  COMMIT=`echo "${COMMIT}.."`;
fi

# Escape $BRANCH if needed.
BRANCH_ESCAPED=$(echo $BRANCH | sed 's/\//\\\//g');

# Now go through last entries and collect them all, commits or merge commits.
COMMITS=$(git log --reverse $COMMIT | grep -vE "^(Author|Merge):" \
    | sed 's/^commit /commit---\n/g');
# Commits now have their hashes on new lines.
# The "commit" lines have "---" appended to distinguish
#  them from the word "commit" in a commit message.
# Remove commits that we already have in the commits.log.
# This happens when we merge a branch that we have been working on ourselves.
while (true);
do
  OLDEST_COMMIT=$(echo "${COMMITS}" | head -n 2 | tail -n 1);
  if [ "$(grep -c "^commit ${OLDEST_COMMIT}" "${FILEOUT}")" != "0" ];
  then
    # Remove this commit.
    # Let sed match the commit hash on line 2 until the next commit,
    #  then replace everything (c\, escaped to c\\) with nothing.
    COMMITS=$(echo "${COMMITS}" | sed -e "/${OLDEST_COMMIT}/,/commit---/c\\");
  else
    break;
  fi;
done;

# Now log them all. Paste "commit" lines back to their hash on the next line.
# NOTE: Sed removes newlines before matching, so you can never replace newlines.
#       This code lets sed read in the entire text first; then you can.
# Label a, add line to pattern space, unless at last line, go back to label a.
echo "${COMMITS}" | sed ':a;N;$!ba;s/commit---\n/commit /g' \
    | sed "s/^commit/Project: ${PROJECT}\nBranch: ${BRANCH_ESCAPED}\ncommit/" \
    >> $FILEOUT;
echo "" >> $FILEOUT;

# Store the commit hash, so that we won't repeat commits in the logs.
cat $STATUS 2> /dev/null | grep -v "^${PROJECT} ${BRANCH} " > "${STATUS}.tmp";
echo -n "${PROJECT} ${BRANCH} " >> "${STATUS}.tmp";
git rev-parse HEAD >> "${STATUS}.tmp";
mv "${STATUS}.tmp" $STATUS;
